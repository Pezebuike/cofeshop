name: Build and Deploy Infrastructure
# Triggering conditions for the workflow
on:
  push:
env:
  # Environment variables for AWS configuration
  aws_region: ${{ secrets.AWS_REGION }}  # AWS region for deployment
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}  # S3 bucket for storing Terraform state
jobs:
  # Job to deploy the infrastructure using Terraform
  deploy-infra:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest  # Run on the latest Ubuntu image in GitHub Actions
    defaults:
      run:
        shell: bash  # Use bash shell for running commands
    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4  # Use the checkout action to pull down code
      # Step 2: Install Terraform
      - name: Set Up Terraform
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -  # Add HashiCorp's GPG key
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"  # Add Terraform repository
          sudo apt-get update -y
          sudo apt-get install -y terraform  # Install Terraform
      # Step 3: Configure AWS credentials for Terraform
      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v4  # Use the AWS credentials action (v4)
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access key stored in GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret key stored in GitHub Secrets
          aws-region: ${{ env.aws_region }}  # AWS region set in the environment variables
      # Step 4: Check Terraform formatting
      - name: Terraform fmt
        id: fmt
        working-directory: ./main  # Set the working directory to the main folder
        run: |
          terraform fmt # Check if Terraform configuration is properly formatted
        
      # Step 5: Initialize Terraform
      - name: Initialize Terraform
        id: init
        working-directory: ./main  # Set the working directory to the main folder
        run: |
          terraform init -backend-config="bucket=${{ env.BUCKET_TF_STATE }}" -backend-config="key=terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="skip_credentials_validation=true" # Initialize the backend with S3 bucket and region
       
      # Step 6: Validate Terraform configuration
      - name: Validate Terraform
        id: validate
        working-directory: ./main  # Set the working directory to the main folder
        run: |
          terraform validate  # Validate the Terraform configuration for any errors
      # Step 7: Plan Terraform deployment
      - name: Plan Terraform Deployment
        id: plan
        working-directory: ./main  # Set the working directory to the main folder
        run: |
          terraform plan -var-file="terraform.tfvars" -input=false -no-color -out planfile  # Plan the deployment using a Terraform variable file
        continue-on-error: true  # Allow the workflow to continue even if this step fails
     
      # Step 8: Check if Terraform plan failed
      - name: Terraform Status
        # Check if the previous plan step failed
        if: steps.plan.outcome == 'failure'
        run: |
          exit 1  # Exit the workflow with an error if the plan failed
       
      # Step 9: Apply the Terraform deployment
      - name: Apply Terraform Deployment
        id: apply
        working-directory: ./main  # Set the working directory to the main folder
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'  # Only apply the deployment on push events
        run: |
          terraform apply -auto-approve -var-file="terraform.tfvars" -parallelism=1 planfile  # Apply the deployment automatically (no prompts)
               
      # Optional step to destroy Terraform infrastructure (commented out)
      - name: Destroy Terraform Infrastructure
        working-directory: ./main  # Set the working directory to the main folder
        if: always()  # Ensures this step runs even if previous steps fail
        run: |
          terraform destroy -auto-approve -var-file="terraform.tfvars"  # Destroy the infrastructure automatically (no prompts)