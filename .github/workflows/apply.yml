name: Apply Infrastructure
on:
  workflow_dispatch:
    inputs:
      module:
        type: string
        description: 'Module to deploy'
        required: true
      resource_name:
        type: string
        description: 'Name of the resource to deploy'
        required: true

env:
  aws_region: ${{ secrets.AWS_REGION }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

jobs:
  deploy-infra:
    name: "Deploy ${{ github.event.inputs.module }}"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    environment:
      name: ${{ github.event.inputs.module }}-${{ github.event.inputs.resource_name }}
      url: ${{ steps.environment.outputs.environment_url }}
    
    steps:
      # Step 1: Checkout code
      - name: Checkout Code
        uses: actions/checkout@v4
      
      # Step 2: Install Terraform
      - name: Set Up Terraform
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update -y
          sudo apt-get install -y terraform
      
      # Step 3: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.aws_region }}
      
      # Step 4: Create backend configuration
      - name: Create Backend Configuration
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_TF_STATE"
              key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
              region         = "$aws_region"
              encryption     = true
              
            }
          }
          EOF
        working-directory: modules/${{ github.event.inputs.module }}
      
      # Step 5: Check Terraform formatting
      - name: Terraform fmt
        id: fmt
        working-directory: modules/${{ github.event.inputs.module }}
        run: terraform fmt
      
      # Step 6: Initialize Terraform
      - name: Initialize Terraform
        id: init
        working-directory: modules/${{ github.event.inputs.module }}
        run: |
          terraform init -backend-config="bucket=${{ env.BUCKET_TF_STATE }}" \
            -backend-config="key=${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate" \
            -backend-config="region=${{ env.aws_region }}" \
            -backend-config="skip_credentials_validation=true"
      
      # Step 7: Validate Terraform configuration
      - name: Validate Terraform
        id: validate
        working-directory: modules/${{ github.event.inputs.module }}
        run: terraform validate
      
      # Step 8: Plan Terraform deployment
      - name: Plan Terraform Deployment
        id: plan
        working-directory: modules/${{ github.event.inputs.module }}
        run: |
          terraform plan -var-file="${{ github.event.inputs.module }}.tfvars" -input=false -no-color -out planfile
        continue-on-error: true
      
      # Step 9: Check if plan failed
      - name: Terraform Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      # Step 10: Apply the Terraform deployment
      - name: Apply Terraform Deployment
        id: apply
        working-directory: modules/${{ github.event.inputs.module }}
        run: |
          terraform apply -auto-approve -var-file="${{ github.event.inputs.module }}.tfvars" -parallelism=1 planfile
      
      # Step 11: Output deployment info
      - name: Output Deployment Info
        run: |
          echo "environment_url=https://console.aws.amazon.com/console/home?region=${{ env.aws_region }}" >> $GITHUB_OUTPUT
          echo "Successfully deployed ${{ github.event.inputs.module }} - ${{ github.event.inputs.resource_name }}"
        id: environment

       