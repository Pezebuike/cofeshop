name: Apply Infrastructure
on:
  workflow_dispatch:
    inputs:
      module:
        type: choice
        description: 'Module to deploy'
        required: true
        options:
          - alb
          - ec2
          - security_group
          - vpc
      resource_name:
        type: string
        description: 'Name of the resource to deploy'
        required: true

permissions:
  contents: read
  id-token: write
    
env:
  TF_PLAN_FILE: ${{ github.sha }}.tfplan
  aws_region: ${{ secrets.AWS_REGION }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

jobs:
  plan:
    name: "Plan ${{ github.event.inputs.module }}"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}
          role-session-name: Deployment
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Backend Configuration
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_TF_STATE"
              key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
              region         = "$aws_region"
              encryption     = true
              dynamodb_table = "${{ github.event.inputs.module }}-terraform-lock"
            }
          }
          EOF
        working-directory: modules/${{ github.event.inputs.module }}

      - name: Terraform Init
        run: terraform init
        working-directory: modules/${{ github.event.inputs.module }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: modules/${{ github.event.inputs.module }}

      - name: Terraform Plan
        run: terraform plan -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
        working-directory: modules/${{ github.event.inputs.module }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ github.event.inputs.module }}
          path: modules/${{ github.event.inputs.module }}/${{ env.TF_PLAN_FILE }}
        
  apply:
    name: "Apply ${{ github.event.inputs.module }}"
    runs-on: ubuntu-latest
    needs: plan
    environment:
      name: ${{ github.event.inputs.module }}-${{ github.event.inputs.resource_name }}
      url: ${{ steps.environment.outputs.environment_url }}
            
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
                
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7
                
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}
          role-session-name: Deployment
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Backend Configuration
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_TF_STATE"
              key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
              region         = "$aws_region"
              encryption     = true
              kms_key_id     = "${{ secrets.BACKEND_AWS_KMS_KEY_ID }}"
              dynamodb_table = "${{ secrets.BACKEND_DYNAMODB_TABLE }}-terraform-lock"
            }
          }
          EOF
        working-directory: modules/${{ github.event.inputs.module }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-${{ github.event.inputs.module }}
          path: modules/${{ github.event.inputs.module }}

      - name: Terraform Init
        run: terraform init
        working-directory: modules/${{ github.event.inputs.module }}

      - name: Terraform Apply
        run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}
        working-directory: modules/${{ github.event.inputs.module }}
        
      - name: Output Deployment Info
        run: |
          echo "environment_url=https://console.aws.amazon.com/console/home?region=${{ secrets.AWS_REGION }}" >> $GITHUB_OUTPUT
          echo "Successfully deployed ${{ github.event.inputs.module }} - ${{ github.event.inputs.resource_name }}"
        id: environment