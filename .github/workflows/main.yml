name: Infrastructure Management
# Workflow to either apply or destroy infrastructure based on inputs
on:
  # Allow manual triggering of the workflow with parameters
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Action to perform'
        required: true
        options:
          - apply
          - destroy
      module:
        type: choice
        description: 'Module to manage'
        required: true
        options:
          - alb
          - ec2
          - security_group
          - vpc
      resource_name:
        type: string
        description: 'Name of the resource'
        required: true

# Define GitHub Actions permissions
permissions:
  contents: read
  id-token: write
   
# Define environment variables available to all jobs
env:
  TF_PLAN_FILE: ${{ github.sha }}.tfplan
  aws_region: ${{ secrets.AWS_REGION }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

# Define the jobs to run in this workflow
jobs:
  setup:
    name: "Setup"
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4  # Use the checkout action to pull down code
      
      # Step 2: Install Terraform
      - name: Set Up Terraform
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -  # Add HashiCorp's GPG key
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"  # Add Terraform repository
          sudo apt-get update -y
          sudo apt-get install -y terraform  # Install Terraform
      
      # Step 3: Configure AWS credentials for Terraform
      - name: Configure AWS Credentials for Terraform
        uses: aws-actions/configure-aws-credentials@v4  # Use the AWS credentials action (v4)
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Access key stored in GitHub Secrets
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  # Secret key stored in GitHub Secrets
          aws-region: ${{ env.aws_region }}  # AWS region set in the environment variables

  # Dynamically call either apply or destroy workflow based on input
  manage-infrastructure:
    name: "${{ github.event.inputs.action }} ${{ github.event.inputs.module }}"
    needs: setup
    uses: ./.github/workflows/${{ github.event.inputs.action }}.yml
    with:
      module: ${{ github.event.inputs.module }}
      resource_name: ${{ github.event.inputs.resource_name }}
    secrets: inherit




    # steps:
    #   - name: Run Apply Workflow
    #     if: ${{ github.event.inputs.action == 'apply' }}
    #     uses: ./.github/workflows/apply.yml
    #     with:
    #       module: ${{ github.event.inputs.module }}
    #       resource_name: ${{ github.event.inputs.resource_name }}
    #     secrets: inherit

    #   - name: Run Destroy Workflow
    #     if: ${{ github.event.inputs.action == 'destroy' }}
    #     uses: ./.github/workflows/destroy.yml
    #     with:
    #       module: ${{ github.event.inputs.module }}
    #       resource_name: ${{ github.event.inputs.resource_name }}
    #     secrets: inherit

  # destroy:
  #   name: "Destroy ${{ github.event.inputs.module }}"  # Dynamic job name based on selected module
  #   runs-on: ubuntu-latest  # Run on the latest Ubuntu image in GitHub Actions

  #   steps:
  #     # Step 1: Check out the repository code
  #     - name: Checkout Code
  #       uses: actions/checkout@v4  # Use the checkout action to pull down code
      
  #     # Step 2: Set up Terraform with the specified version
  #     - name: Set Up Terraform
  #       uses: hashicorp/setup-terraform@v2  # Use the HashiCorp setup action (v2)
  #       with:
  #         terraform_version: 1.7  # Specify the version of Terraform to use
      
  #     # Step 3: Configure AWS credentials for the first role
  #     - name: Configure AWS Credentials from Account 
  #       uses: aws-actions/configure-aws-credentials@v4  # Use the AWS credentials action (v4)
  #       with:
  #         role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}  # Role to assume for AWS credentials
  #         role-session-name: Deployment  # Session name for the assumed role
  #         aws-region: ${{ secrets.AWS_REGION }}  # AWS region for deployment  

  #     # Step 4: Configure additional AWS credentials (with role chaining)
  #     - name: Configure Other AWS Credentials from Account 
  #       uses: aws-actions/configure-aws-credentials@v4  # Use the AWS credentials action (v4)
  #       with:
  #         role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}  # Role to assume for AWS credentials
  #         role-session-name: Deployment  # Session name for the assumed role
  #         aws-region: ${{ secrets.AWS_REGION }}  # AWS region for deployment
  #         role-chaining: true  # Enable role chaining for assuming multiple roles

  #     # Step 5: Create a Terraform backend configuration file for S3
  #     - name: Create Backend Configuration File
  #       run: |
  #         # Create backend.tf with S3 configuration using a heredoc
  #         cat > backend.tf << EOF
  #         terraform {
  #           backend "s3" {
  #             bucket         = "$BUCKET_TF_STATE"
  #             key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
  #             region         = "$aws_region"
  #             encryption     = true
  #             dynamodb_table = "${{ github.event.inputs.module }}-terraform-lock"
  #           }
  #         }
  #         EOF  # End of heredoc
  #       working-directory: modules/${{github.event.inputs.module}}  # Set the working directory to the selected module folder  

  #     # Step 6: Initialize Terraform with the backend configuration
  #     - name: Terraform Init
  #       run: terraform init  # Initialize Terraform to download providers and modules
  #       working-directory: modules/${{github.event.inputs.module}}  # Set the working directory to the module folder    

  #     # Step 7: Create a Terraform destroy plan
  #     - name: Terraform Plan Destroy
  #       run: terraform plan -destroy -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"  # Create a Terraform plan for destroying resources
  #       working-directory: modules/${{github.event.inputs.module}}  # Set the working directory to the module folder

  #     # Step 8: Upload the Terraform plan as an artifact for the next job
  #     - name: Upload Terraform Plan
  #       uses: actions/upload-artifact@v3  # Use the upload artifact action (v3)
  #       with:
  #         name: terraform-plan-destroy  # Name of the artifact
  #         path: modules/${{github.event.inputs.module}}/${{ env.TF_PLAN_FILE }}  # Path to the Terraform plan file
        
  # # Second job: Apply the Terraform destroy plan after approval
  # destroy-apply:
  #   name: "Apply Destroy ${{ github.event.inputs.module }}"  # Dynamic job name based on selected module
  #   runs-on: ubuntu-latest  # Run on the latest Ubuntu image in GitHub Actions 
  #   needs: destroy  # This job depends on the destroy job completing first
  #   environment:  # Define a deployment environment for approval
  #     name: ${{ github.event.inputs.module }}-${{ github.event.inputs.resource_name }}-destroy  # Dynamic environment name
  #     url: ${{ steps.environment.outputs.environment_url }}  # URL of the environment (from a step output)
            
  #   steps:
  #     # Step 1: Check out the repository code
  #     - name: Checkout Code
  #       uses: actions/checkout@v4  # Use the checkout action to pull down code
                
  #     # Step 2: Set up Terraform with the specified version
  #     - name: Set Up Terraform
  #       uses: hashicorp/setup-terraform@v2  # Use the HashiCorp setup action (v2)
  #       with:
  #         terraform_version: 1.7  # Specify the version of Terraform to use
                
  #     # Step 3: Configure AWS credentials for the first role
  #     - name: Configure AWS Credentials from Account 
  #       uses: aws-actions/configure-aws-credentials@v4  # Use the AWS credentials action (v4)
  #       with:
  #         role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}  # Role to assume for AWS credentials
  #         role-session-name: Deployment  # Session name for the assumed role
  #         aws-region: ${{ secrets.AWS_REGION }}  # AWS region for deployment
  #         role-chaining: true  # Enable role chaining for assuming multiple roles

  #     # Step 4: Configure additional AWS credentials (with role chaining)
  #     - name: Configure Other AWS Credentials from Account 
  #       uses: aws-actions/configure-aws-credentials@v4  # Use the AWS credentials action (v4)
  #       with:
  #         role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}  # Role to assume for AWS credentials
  #         role-session-name: Deployment  # Session name for the assumed role
  #         aws-region: ${{ secrets.AWS_REGION }}  # AWS region for deployment
  #         role-chaining: true  # Enable role chaining for assuming multiple roles

  #     # Step 5: Create a Terraform backend configuration file (with additional KMS encryption)
  #     - name: Create Backend Configuration File
  #       run: |
  #         # Create backend.tf with S3 configuration using a heredoc
  #         cat > backend.tf << EOF
  #         terraform {
  #           backend "s3" {
  #             bucket         = "$BUCKET_TF_STATE"
  #             key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
  #             region         = "$aws_region"
  #             encryption     = true
  #             kms_key_id     = "${{ secrets.BACKEND_AWS_KMS_KEY_ID }}"  # KMS key ID for encryption
  #             dynamodb_table = "${{ secrets.BACKEND_DYNAMODB_TABLE }}-terraform-lock"
  #           }
  #         }
  #         EOF  # End of heredoc
  #       working-directory: modules/${{github.event.inputs.module}}  # Set the working directory to the module folder      

  #     # Step 6: Download the Terraform plan artifact from the previous job
  #     - name: Download Terraform Plan Destroy
  #       uses: actions/download-artifact@v3  # Use the download artifact action (v3)
  #       with:
  #         name: terraform-plan-destroy  # Name of the artifact
  #         path: modules/${{github.event.inputs.module}}  # Path to download the artifact

  #     # Step 7: Initialize Terraform with the backend configuration
  #     - name: Terraform Init
  #       run: terraform init  # Initialize Terraform to download providers and modules
  #       working-directory: modules/${{github.event.inputs.module}}  # Set the working directory to the module folder

  #     # Step 8: Apply the Terraform destroy plan
  #     - name: Terraform Apply Destroy
  #       run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}  # Apply the Terraform plan to destroy resources with auto-approval
  #       working-directory: modules/${{github.event.inputs.module}}  # Set the working directory to the module folder