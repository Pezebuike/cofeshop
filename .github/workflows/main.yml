name: Infrastructure Management Router
on:
  workflow_dispatch:
    inputs:
      action:
        type: choice
        description: 'Action to perform'
        required: true
        options:
          - apply
          - destroy
      module:
        type: choice
        description: 'Module to manage'
        required: true
        options:
          - alb
          - ec2
          - security_group
          - vpc
      resource_name:
        type: string
        description: 'Name of the resource'
        required: true
permissions:
  contents: read
  id-token: write
   
env:
  TF_PLAN_FILE: ${{ github.sha }}.tfplan
  aws_region: ${{ secrets.AWS_REGION }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  manage-infrastructure:
    name: "${{ github.event.inputs.action }} ${{ github.event.inputs.module }}"
    runs-on: ubuntu-latest
    steps:
      # Common steps
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7
     
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.aws_region }}
          aws-access-key-id: ${{ env.aws_access_key_id }}
          aws-secret-access-key: ${{ env.aws_secret_access_key }}
         
      # Apply-specific steps
      - name: Create Backend Config
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_TF_STATE"
              key            = "${{ github.event.inputs.module }}/${{ github.event.inputs.resource_name }}.tfstate"
              region         = "$aws_region"
             
            }
          }
          EOF
        working-directory: modules/${{ github.event.inputs.module }}
     
      - name: Terraform Init
        run: terraform init
        working-directory: modules/${{ github.event.inputs.module }}
       
      # Conditional Apply steps
      - name: Terraform Plan (Apply)
        if: github.event.inputs.action == 'apply'
        run: terraform plan -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
        working-directory: modules/${{ github.event.inputs.module }}
       
      # Conditional Destroy steps  
      - name: Terraform Plan (Destroy)
        if: github.event.inputs.action == 'destroy'
        run: terraform plan -destroy -out ${{ env.TF_PLAN_FILE }} -var-file="${{ github.event.inputs.module }}.tfvars"
        working-directory: modules/${{ github.event.inputs.module }}
       
      # Apply with approval
      - name: Terraform Apply
        if: success()
        run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}
        working-directory: modules/${{ github.event.inputs.module }}



# name: Infrastructure Management Router
# on:
#   workflow_dispatch:
#     inputs:
#       action:
#         type: choice
#         description: 'Action to perform'
#         required: true
#         options:
#           - apply
#           - destroy
#       module:
#         type: choice
#         description: 'Module to manage'
#         required: true
#         options:
#           - alb
#           - asg
#           - security_group
#           - vpc
#       resource_name:
#         type: string
#         description: 'Name of the resource'
#         required: true
        
# permissions:
#   contents: read
#   id-token: write

# env:
#   aws_region: ${{ secrets.AWS_REGION }}
#   BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

# jobs:
#   router:
#     name: "Route to ${{ github.event.inputs.action }} workflow"
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       - name: Trigger workflow
#         run: |
#           echo "Triggering ${{ github.event.inputs.action }} workflow for ${{ github.event.inputs.module }} module..."
#           gh workflow run ${{ github.event.inputs.action }}.yml \
#             -f module=${{ github.event.inputs.module }} \
#             -f resource_name="${{ github.event.inputs.resource_name }}"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
#       - name: Confirm workflow triggered
#         run: |
#           echo "Successfully triggered the ${{ github.event.inputs.action }} workflow"
#           echo "Module: ${{ github.event.inputs.module }}"
#           echo "Resource name: ${{ github.event.inputs.resource_name }}"