name: Destroy Infrastructure
# This is a reusable workflow for destroying infrastructure

on:
  workflow_call:
    inputs:
      module:
        type: string
        description: 'Module to destroy'
        required: true
      resource_name:
        type: string
        description: 'Name of the resource to destroy'
        required: true

permissions:
  contents: read
  id-token: write
    
env:
  TF_PLAN_FILE: ${{ github.sha }}.tfplan
  aws_region: ${{ secrets.AWS_REGION }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}

jobs:
  destroy-plan:
    name: "Plan Destroy ${{ inputs.module }}"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}
          role-session-name: Destroy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Backend Configuration File
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_TF_STATE"
              key            = "${{ inputs.module }}/${{ inputs.resource_name }}.tfstate"
              region         = "$aws_region"
              encryption     = true
              dynamodb_table = "${{ inputs.module }}-terraform-lock"
            }
          }
          EOF
        working-directory: modules/${{ inputs.module }}

      - name: Terraform Init
        run: terraform init
        working-directory: modules/${{ inputs.module }}

      - name: Terraform Plan Destroy
        run: terraform plan -destroy -out ${{ env.TF_PLAN_FILE }} -var-file="${{ inputs.module }}.tfvars"
        working-directory: modules/${{ inputs.module }}

      - name: Upload Terraform Destroy Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-destroy
          path: modules/${{ inputs.module }}/${{ env.TF_PLAN_FILE }}
        
  destroy-apply:
    name: "Apply Destroy ${{ inputs.module }}"
    runs-on: ubuntu-latest
    needs: destroy-plan
    environment:
      name: ${{ inputs.module }}-${{ inputs.resource_name }}-destroy
      url: ${{ steps.environment.outputs.environment_url }}
            
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
                
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7
                
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}
          role-session-name: Destroy
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create Backend Configuration File
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_TF_STATE"
              key            = "${{ inputs.module }}/${{ inputs.resource_name }}.tfstate"
              region         = "$aws_region"
              encryption     = true
              kms_key_id     = "${{ secrets.BACKEND_AWS_KMS_KEY_ID }}"
              dynamodb_table = "${{ secrets.BACKEND_DYNAMODB_TABLE }}-terraform-lock"
            }
          }
          EOF
        working-directory: modules/${{ inputs.module }}

      - name: Download Terraform Plan Destroy
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-destroy
          path: modules/${{ inputs.module }}

      - name: Terraform Init
        run: terraform init
        working-directory: modules/${{ inputs.module }}

      - name: Terraform Apply Destroy
        run: terraform apply -auto-approve ${{ env.TF_PLAN_FILE }}
        working-directory: modules/${{ inputs.module }}
        
      - name: Output Destruction Info
        run: |
          echo "environment_url=https://console.aws.amazon.com/console/home?region=${{ secrets.AWS_REGION }}" >> $GITHUB_OUTPUT
          echo "Successfully destroyed ${{ inputs.module }} - ${{ inputs.resource_name }}"
        id: environment